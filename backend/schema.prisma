// =====================================
// Prisma schema for a full e-commerce backend
// =====================================

generator client {
  provider = "prisma-client-js"
}

generator typescriptInterfaces {
  provider          = "prisma-generator-typescript-interfaces"
  output            = "../shared/types/PrismaTypes.ts"
  optionalNullables = true
  enumType          = object
  prettier          = true
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

//////////////////////////////////////////////////////////////////
/// ENUMS
//////////////////////////////////////////////////////////////////
enum UserRole {
  USER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum ShippingStatus {
  LABEL_CREATED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  EXCEPTION
}

enum TransactionStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CARD
  STRIPE
  PAYPAL
  SQUARE
  CASH
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  AFTERPAY
  KLARNA
  BITCOIN
  ETHEREUM
  LITECOIN
  OTHER_CRYPTO
  OTHER
}

enum ShippingCarrier {
  UPS
  FEDEX
  USPS
  DHL
  AMAZON
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  OVERNIGHT
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  DISCONTINUED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum StockMovementType {
  SALE
  RESTOCK
  ADJUSTMENT
}

enum SystemSettingsScope {
  SITE
  ADMIN
  ENGINE
}

//////////////////////////////////////////////////////////////////
/// USERS & AUTH
//////////////////////////////////////////////////////////////////
model User {
  id                  String    @id @default(uuid())
  email               String    @unique
  passwordHash        String
  firstName           String
  lastName            String
  phone               String?   @unique
  role                UserRole  @default(USER)
  isVerified          Boolean   @default(false)
  lastLogin           DateTime?
  failedLoginAttempts Int       @default(0)
  cart                Cart?
  settings            Json? ///is*UserSettings*
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  addresses      Address[]
  paymentMethods UserPaymentMethod[]
  orders         Order[]
  reviews        ProductReview[]
  sessions       Session[]
}

model UserPaymentMethod {
  id            String @id @default(uuid())
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  type          PaymentMethod
  last4         String
  expiry        String
  providerToken String


}

//////////////////////////////////////////////////////////////////
/// COLLECTIONS & CATEGORIES
//////////////////////////////////////////////////////////////////
model Collection {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  description String?
  seoTitle    String?
  seoKeywords String?
  images      CollectionImageSet?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  products Product[] @relation("ProductCollections")
}

model Category {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  description String?
  seoTitle    String?
  seoKeywords String?
  images      CollectionImageSet?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  products Product[] @relation("ProductCategories")
}

model CollectionImageSet {
  id        String @id @default(uuid())
  banner    String
  preview   String
  thumbnail String

  // Relations
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String?     @unique
  category     Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId   String?     @unique
}

//////////////////////////////////////////////////////////////////
/// PRODUCTS
//////////////////////////////////////////////////////////////////
model Product {
  id             String             @id @default(uuid())
  name           String
  sku            String?            @unique
  price          Int
  discount       Int?
  discountType   DiscountType?
  description    String
  stock          Int?
  reviewCount    Int?               @default(0) @map("review_count")
  averageRating  Float?             @default(0.0) @map("average_rating")
  status         ProductStatus      @default(ACTIVE)
  dimensions     ProductDimensions?
  tags           ProductTag[]
  images         ProductImageSet[]
  options        ProductOption[]
  variants       ProductVariant[]
  categories     Category[]         @relation("ProductCategories")
  collections    Collection[]       @relation("ProductCollections")
  stockMovements StockMovement[]
  reviews        ProductReview[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  CartItem       CartItem?
}

model ProductImageSet {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  main      String
  preview   String
  thumbnail String
}

model ProductOption {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  values    Json ///is*string[]*
}

model ProductVariant {
  id      String @id @default(uuid())
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  options Json  ///is*string[]*
  price   Int?
  stock   Int?

  // Relations
  CartItem  CartItem[]
}

model ProductDimensions {
  id     String @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
  weight Int?
  length Int?
  width  Int?
  height Int?
}

model ProductTag {
  id        String  @id @default(uuid())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  color     String?
  textColor String?
}

model ProductReview {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  rating       Int
  comment      String
  status       ReviewStatus @default(PENDING)
  helpfulCount Int          @default(0)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt


}

model ProductTagPreset {
  id        String  @id @default(uuid())
  name      String
  color     String?
  textColor String?
}

model ProductOptionsPreset {
  id       String @id @default(uuid())
  name     String
  options  Json ///is*ProductOption[]*
}

//////////////////////////////////////////////////////////////////
/// INVENTORY / STOCK
//////////////////////////////////////////////////////////////////
model StockMovement {
  id        String            @id @default(uuid())
  product   Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  type      StockMovementType
  timestamp DateTime          @default(now())
  notes     String?
}

//////////////////////////////////////////////////////////////////
/// ADDRESS & SHIPPING
//////////////////////////////////////////////////////////////////
model Address {
  id             String        @id @default(uuid())
  name           String
  company        String?
  email          String
  phone          String?
  street1        String
  street2        String?
  city           String
  state          String
  postalCode     String
  country        String
  label          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?       @unique
  ShippingInfo   ShippingInfo? @relation(fields: [ShippingInfoId], references: [id], onDelete: Cascade)
  ShippingInfoId String?       @unique
  Transaction    Transaction?  @relation(fields: [TransactionId], references: [id], onDelete: Cascade)
  TransactionId  String?       @unique
}

model ShippingInfo {
  id            String                  @id @default(uuid())
  order         Order                   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String                  @unique
  address       Address?
  carrier       ShippingCarrier?
  method        ShippingMethod?
  cost          Int?
  tracking      String?
  labelUrl      String?
  status        ShippingStatus?
  statusHistory ShippingStatusHistory[]
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
}

model ShippingStatusHistory {
  id             String         @id @default(uuid())
  shippingInfo   ShippingInfo   @relation(fields: [shippingInfoId], references: [id], onDelete: Cascade)
  shippingInfoId String
  status         ShippingStatus
  timestamp      DateTime       @default(now())
}

//////////////////////////////////////////////////////////////////
/// ORDERS & TRANSACTIONS
//////////////////////////////////////////////////////////////////
model Order {
  id             String               @id @default(uuid())
  user           User?                @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId         String?
  status         OrderStatus          @default(PENDING)
  total          Int
  tax            Int?
  shippingCost   Int?
  transaction    Transaction?
  shippingInfo   ShippingInfo?
  items          OrderItem[]
  statusHistory  OrderStatusHistory[]
  invoices       Invoice[]
  notes          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  shippingInfoId String?
}

model OrderItem {
  id       String @id @default(uuid())
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  product  Json ///is*Product*
  variant  Json? ///is*ProductVariant*
  quantity Int
  price    Int
}

model Transaction {
  id              String            @id @default(uuid())
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String            @unique
  billingAddress  Address?
  amount          Int
  currency        String
  method          PaymentMethod
  status          TransactionStatus
  gatewayResponse Json?
}

model OrderStatusHistory {
  id        String      @id @default(uuid())
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  status    OrderStatus
  timestamp DateTime    @default(now())
}

model Invoice {
  id            String   @id @default(uuid())
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId       String
  invoiceNumber String
  pdfUrl        String?
  createdAt     DateTime @default(now())
}

//////////////////////////////////////////////////////////////////
/// COUPONS
//////////////////////////////////////////////////////////////////
model Coupon {
  id           String       @id @default(uuid())
  code         String       @unique
  discountType DiscountType
  value        Int
  usageLimit   Int?
  expiresAt    DateTime
  createdAt    DateTime     @default(now())
}

//////////////////////////////////////////////////////////////////
/// SESSIONS & CARTS
//////////////////////////////////////////////////////////////////
model Session {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  token     String   @unique
  ipAddress String?
  userAgent String?
  cart      Cart?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String     @id @default(uuid())
  session   Session?   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String?    @unique
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?    @unique
  items     CartItem[]
  subtotal  Int        @default(0)
  total     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String          @id @default(uuid())
  cart      Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String          @unique
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  variantId String?
  quantity  Int             @default(1)
  price     Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}


//////////////////////////////////////////////////////////////////
/// SETTINGS
//////////////////////////////////////////////////////////////////
model SystemSettings {
  id        String  @id @default(uuid())
  scope     SystemSettingsScope  @unique // ADMIN, SITE or ENGINE
  settings  Json // AdminSettings, SiteSettings or EngineSettings
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}