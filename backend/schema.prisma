// =====================================
// Prisma schema for a full e-commerce backend
// =====================================

// Prisma Commands Cheat Sheet
// --------------------------

// Init Prisma
// npx prisma init       -> create schema.prisma and .env

// Generate Prisma Client
// npx prisma generate   -> regenerate client after schema changes

// Migrations
// npx prisma migrate dev --name <name>   -> create & apply dev migration
// npx prisma migrate deploy              -> apply migrations in prod

// Database
// npx prisma db push      -> push schema changes to DB without migration
// npx prisma db pull      -> pull schema from existing DB

// Studio
// npx prisma studio       -> open GUI to explore DB

// Format
// npx prisma format       -> format schema.prisma


// =====================================
// Prisma schema for a full e-commerce backend
// =====================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

//////////////////////
// ENUMS
//////////////////////

enum UserRole {
  USER
  STAFF
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

enum TransactionStatus {
  PENDING
  PAID
  REFUNDED
  FAILED
}

enum PaymentMethod {
  CARD
  STRIPE
  PAYPAL
  SQUARE
  CASH
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  AFTERPAY
  KLARNA
  BITCOIN
  ETHEREUM
  LITECOIN
  OTHER_CRYPTO
  OTHER
}

enum ShippingCarrier {
  UPS
  FEDEX
  USPS
  DHL
  AMAZON
}

enum ShippingMethod {
  STANDARD
  EXPRESS
  OVERNIGHT
}

//////////////////////
// USERS
//////////////////////

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  firstName      String
  lastName       String
  phone          String?
  role           UserRole
  preferences    Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  addresses      UserAddress[]
  paymentMethods UserPaymentMethod[]
  orders         Order[]
  reviews        ProductReview[]    // opposite relation for ProductReview
}

model UserAddress {
  id        String @id @default(uuid())
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  label     String
  street    String
  city      String
  state     String
  zip       String
  country   String
  isDefault Boolean
}

model UserPaymentMethod {
  id            String @id @default(uuid())
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  type          String
  last4         String
  expiry        String
  providerToken String
}

//////////////////////
// COLLECTIONS & CATEGORIES
//////////////////////

model Collection {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  description String?
  seo         Json?
  images      CollectionImageSet?
  products    Product[]           @relation("ProductCollections")
}

model Category {
  id          String              @id @default(uuid())
  name        String
  slug        String              @unique
  description String?
  seo         Json?
  products    Product[]           @relation("ProductCategories")
}

model CollectionImageSet {
  id          Int        @id @default(autoincrement())
  banner      String
  preview     String
  thumbnail   String
  collection  Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @unique
}

//////////////////////
// PRODUCTS
//////////////////////

model Product {
  id            String            @id @default(uuid())
  name          String
  price         Float
  discount      String?
  description   String
  stock         Int
  reviewCount   Int?              @map("review_count")
  averageRating Float?            @map("average_rating")

  dimensions    ProductDimensions?
  tags          ProductTag[]
  images        ProductImageSet[]
  options       ProductOption[]
  reviews       ProductReview[]
  variants      ProductVariant[]
  categories    Category[]         @relation("ProductCategories")
  collections   Collection[]       @relation("ProductCollections")
}

model ProductImageSet {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  main      String
  preview   String
  thumbnail String
}

model ProductTag {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  name      String
  color     String?
}

model ProductOption {
  id         String             @id @default(uuid())
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  name       String
  values     String
}

model ProductOptionsPreset {
  id       String               @id @default(uuid())
  name     String
  options  ProductOptionPreset[]
}

model ProductOptionPreset {
	id        String                @id @default(uuid())
	preset    ProductOptionsPreset  @relation(fields: [presetId], references: [id], onDelete: Cascade)
	presetId  String
	name      String
	values    String
}

model ProductVariant {
  id            String   @id @default(uuid())
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  options       String   @unique
  priceOverride Float?
  stock         Int
}

model ProductDimensions {
  id          String  @id @default(uuid())
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String  @unique
  weightGrams Float?  @map("weight_grams")
  lengthCm    Float?  @map("length_cm")
  widthCm     Float?  @map("width_cm")
  heightCm    Float?  @map("height_cm")
}

model ProductReview {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

//////////////////////
// PRODUCT PRESETS
//////////////////////


model ProductTagPreset {
  id    String @id @default(uuid())
  name  String
  color String?
}

//////////////////////
// ORDERS & TRANSACTIONS
//////////////////////

model Order {
  id            String             @id @default(uuid())
  user          User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?
  status        OrderStatus
  total         Int
  transaction   Transaction?
  shippingInfo  Json
  items         OrderItem[]
  statusHistory OrderStatusHistory[]
  invoices      Invoice[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  notes         String?
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Json     // snapshot: { id, name, description, image, etc. }
  variant   Json?    // snapshot: { id, name, options, etc. }, optional
  quantity  Int
  price     Int    // price at the time of purchase
  total     Int    // quantity * price (optional, precomputed for convenience)
}

model Transaction {
  id              String   @id @default(uuid())
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String   @unique
  amount          Int
  currency        String
  method          PaymentMethod
  status          TransactionStatus
  billingAddress  Json?
}

model OrderStatusHistory {
  id           String    @id @default(uuid())
  order        Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String
  status       OrderStatus
  timestamp    DateTime  @default(now())
}

model Invoice {
  id              String   @id @default(uuid())
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  invoiceNumber   String
  pdfUrl          String?
  createdAt       DateTime @default(now())
}